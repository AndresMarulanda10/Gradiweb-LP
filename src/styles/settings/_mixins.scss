// RESPONSIVE MIXINS
@mixin respond-to($breakpoint) {
  $value: map-get($breakpoints, $breakpoint);

  @if $value {
    @media (min-width: $value) {
      @content;
    }
  } @else {
    @warn "Breakpoint `#{$breakpoint}` not found in $breakpoints map.";
  }
}

@mixin respond-below($breakpoint) {
  $value: map-get($breakpoints, $breakpoint);

  @if $value {
    @media (max-width: #{($value - 1px)}) {
      @content;
    }
  } @else {
    @warn "Breakpoint `#{$breakpoint}` not found in $breakpoints map.";
  }
}

@mixin respond-between($min-breakpoint, $max-breakpoint) {
  $min: map-get($breakpoints, $min-breakpoint);
  $max: map-get($breakpoints, $max-breakpoint);

  @if $min and $max {
    @media (min-width: $min) and (max-width: #{($max - 1px)}) {
      @content;
    }
  } @else {
    @warn "Breakpoints not found in $breakpoints map.";
  }
}

// LAYOUT MIXINS
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin container($max-width: var(--container-xl)) {
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 var(--space-md);

  @include respond-to('lg') {
    padding: 0 var(--space-lg);
  }
}

// ANIMATION MIXINS
@mixin transition($properties: all, $duration: var(--duration-normal), $easing: var(--ease-out)) {
  transition: $properties $duration $easing;
}

@mixin hover-lift($distance: 5px, $shadow: var(--shadow-lg)) {
  transition: transform var(--duration-normal) var(--ease-out),
              box-shadow var(--duration-normal) var(--ease-out);

  &:hover {
    transform: translateY(-#{$distance});
    box-shadow: $shadow;
  }
}

@mixin fade-in($duration: var(--duration-normal)) {
  opacity: 0;
  animation: fadeIn $duration var(--ease-out) forwards;
}

@keyframes fadeIn {
  to {
    opacity: 1;
  }
}

@mixin slide-in-up($distance: 30px, $duration: var(--duration-normal)) {
  opacity: 0;
  transform: translateY($distance);
  animation: slideInUp $duration var(--ease-out) forwards;
}

@keyframes slideInUp {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

// TYPOGRAPHY MIXINS
@mixin heading($size: 'lg', $weight: var(--font-semibold)) {
  font-family: var(--font-primary);
  font-weight: $weight;
  line-height: var(--line-height-tight);

  @if $size == 'xs' {
    font-size: var(--font-lg);
  } @else if $size == 'sm' {
    font-size: var(--font-xl);
  } @else if $size == 'md' {
    font-size: var(--font-2xl);
  } @else if $size == 'lg' {
    font-size: var(--font-3xl);
  } @else if $size == 'xl' {
    font-size: var(--font-4xl);
  } @else if $size == '2xl' {
    font-size: var(--font-5xl);
  }
}

@mixin text-gradient($from: var(--primary-color), $to: var(--secondary-color)) {
  background: linear-gradient(135deg, $from, $to);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

@mixin truncate {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// BUTTON MIXINS
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-sm);
  padding: var(--space-sm) var(--space-lg);
  border: none;
  border-radius: var(--radius-md);
  font-family: var(--font-primary);
  font-size: var(--font-base);
  font-weight: var(--font-medium);
  text-decoration: none;
  cursor: pointer;
  transition: var(--transition-normal);
  user-select: none;

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

@mixin button-primary {
  @include button-base;
  background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
  color: var(--text-white);

  &:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }

  &:active {
    transform: translateY(0);
  }
}

@mixin button-secondary {
  @include button-base;
  background: transparent;
  color: var(--text-dark);
  border: 2px solid var(--primary-color);

  &:hover:not(:disabled) {
    background: var(--primary-color);
    color: var(--text-white);
  }
}

// UTILITY MIXINS
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

@mixin focus-ring($color: var(--primary-color), $width: 2px) {
  outline: $width solid $color;
  outline-offset: 2px;
}

@mixin aspect-ratio($width, $height) {
  aspect-ratio: $width / $height;

  // Fallback para navegadores que no soportan aspect-ratio
  @supports not (aspect-ratio: 1) {
    &::before {
      content: '';
      display: block;
      width: 100%;
      padding-top: percentage($height / $width);
    }

    > * {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }
}

@mixin glass-effect($opacity: 0.1) {
  background: rgba(255, 255, 255, $opacity);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}
